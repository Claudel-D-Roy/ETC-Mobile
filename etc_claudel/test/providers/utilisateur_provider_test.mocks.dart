// Mocks generated by Mockito 5.4.4 from annotations
// in etc_claudel/test/providers/utilisateur_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:auth0_flutter/auth0_flutter.dart' as _i7;
import 'package:auth0_flutter/auth0_flutter_web.dart' as _i8;
import 'package:auth0_flutter/src/mobile/authentication_api.dart' as _i3;
import 'package:auth0_flutter/src/mobile/credentials_manager.dart' as _i2;
import 'package:auth0_flutter/src/mobile/web_authentication.dart' as _i4;
import 'package:auth0_flutter_platform_interface/auth0_flutter_platform_interface.dart'
    as _i5;
import 'package:etc_claudel/ControleursSqflite/utilisateur_controleur.dart'
    as _i10;
import 'package:etc_claudel/Models/utilisateur.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCredentialsManager_0 extends _i1.SmartFake
    implements _i2.CredentialsManager {
  _FakeCredentialsManager_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthenticationApi_1 extends _i1.SmartFake
    implements _i3.AuthenticationApi {
  _FakeAuthenticationApi_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebAuthentication_2 extends _i1.SmartFake
    implements _i4.WebAuthentication {
  _FakeWebAuthentication_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCredentials_3 extends _i1.SmartFake implements _i5.Credentials {
  _FakeCredentials_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUtilisateur_4 extends _i1.SmartFake implements _i6.Utilisateur {
  _FakeUtilisateur_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Auth0].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuth0 extends _i1.Mock implements _i7.Auth0 {
  MockAuth0() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CredentialsManager get credentialsManager => (super.noSuchMethod(
        Invocation.getter(#credentialsManager),
        returnValue: _FakeCredentialsManager_0(
          this,
          Invocation.getter(#credentialsManager),
        ),
      ) as _i2.CredentialsManager);

  @override
  _i3.AuthenticationApi get api => (super.noSuchMethod(
        Invocation.getter(#api),
        returnValue: _FakeAuthenticationApi_1(
          this,
          Invocation.getter(#api),
        ),
      ) as _i3.AuthenticationApi);

  @override
  _i4.WebAuthentication webAuthentication({
    String? scheme,
    bool? useCredentialsManager = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #webAuthentication,
          [],
          {
            #scheme: scheme,
            #useCredentialsManager: useCredentialsManager,
          },
        ),
        returnValue: _FakeWebAuthentication_2(
          this,
          Invocation.method(
            #webAuthentication,
            [],
            {
              #scheme: scheme,
              #useCredentialsManager: useCredentialsManager,
            },
          ),
        ),
      ) as _i4.WebAuthentication);
}

/// A class which mocks [Auth0Web].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuth0Web extends _i1.Mock implements _i8.Auth0Web {
  MockAuth0Web() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i5.Credentials?> onLoad({
    int? authorizeTimeoutInSeconds,
    _i5.CacheLocation? cacheLocation,
    String? cookieDomain,
    int? httpTimeoutInSeconds,
    String? issuer,
    int? leeway,
    bool? useLegacySameSiteCookie,
    int? sessionCheckExpiryInDays,
    bool? useCookiesForTransactions,
    bool? useFormData,
    bool? useRefreshTokens,
    bool? useRefreshTokensFallback,
    String? audience,
    Set<String>? scopes,
    Map<String, String>? parameters = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #onLoad,
          [],
          {
            #authorizeTimeoutInSeconds: authorizeTimeoutInSeconds,
            #cacheLocation: cacheLocation,
            #cookieDomain: cookieDomain,
            #httpTimeoutInSeconds: httpTimeoutInSeconds,
            #issuer: issuer,
            #leeway: leeway,
            #useLegacySameSiteCookie: useLegacySameSiteCookie,
            #sessionCheckExpiryInDays: sessionCheckExpiryInDays,
            #useCookiesForTransactions: useCookiesForTransactions,
            #useFormData: useFormData,
            #useRefreshTokens: useRefreshTokens,
            #useRefreshTokensFallback: useRefreshTokensFallback,
            #audience: audience,
            #scopes: scopes,
            #parameters: parameters,
          },
        ),
        returnValue: _i9.Future<_i5.Credentials?>.value(),
      ) as _i9.Future<_i5.Credentials?>);

  @override
  _i9.Future<void> loginWithRedirect({
    String? audience,
    String? redirectUrl,
    String? organizationId,
    String? invitationUrl,
    int? maxAge,
    Set<String>? scopes,
    Map<String, String>? parameters = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithRedirect,
          [],
          {
            #audience: audience,
            #redirectUrl: redirectUrl,
            #organizationId: organizationId,
            #invitationUrl: invitationUrl,
            #maxAge: maxAge,
            #scopes: scopes,
            #parameters: parameters,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i5.Credentials> loginWithPopup({
    String? audience,
    String? organizationId,
    String? invitationUrl,
    int? maxAge,
    Set<String>? scopes,
    dynamic popupWindow,
    int? timeoutInSeconds,
    Map<String, String>? parameters = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithPopup,
          [],
          {
            #audience: audience,
            #organizationId: organizationId,
            #invitationUrl: invitationUrl,
            #maxAge: maxAge,
            #scopes: scopes,
            #popupWindow: popupWindow,
            #timeoutInSeconds: timeoutInSeconds,
            #parameters: parameters,
          },
        ),
        returnValue: _i9.Future<_i5.Credentials>.value(_FakeCredentials_3(
          this,
          Invocation.method(
            #loginWithPopup,
            [],
            {
              #audience: audience,
              #organizationId: organizationId,
              #invitationUrl: invitationUrl,
              #maxAge: maxAge,
              #scopes: scopes,
              #popupWindow: popupWindow,
              #timeoutInSeconds: timeoutInSeconds,
              #parameters: parameters,
            },
          ),
        )),
      ) as _i9.Future<_i5.Credentials>);

  @override
  _i9.Future<void> logout({
    bool? federated,
    String? returnToUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
          {
            #federated: federated,
            #returnToUrl: returnToUrl,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i5.Credentials> credentials({
    String? audience,
    num? timeoutInSeconds,
    Set<String>? scopes,
    _i5.CacheMode? cacheMode,
    Map<String, String>? parameters = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #credentials,
          [],
          {
            #audience: audience,
            #timeoutInSeconds: timeoutInSeconds,
            #scopes: scopes,
            #cacheMode: cacheMode,
            #parameters: parameters,
          },
        ),
        returnValue: _i9.Future<_i5.Credentials>.value(_FakeCredentials_3(
          this,
          Invocation.method(
            #credentials,
            [],
            {
              #audience: audience,
              #timeoutInSeconds: timeoutInSeconds,
              #scopes: scopes,
              #cacheMode: cacheMode,
              #parameters: parameters,
            },
          ),
        )),
      ) as _i9.Future<_i5.Credentials>);

  @override
  _i9.Future<bool> hasValidCredentials() => (super.noSuchMethod(
        Invocation.method(
          #hasValidCredentials,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);
}

/// A class which mocks [WebAuthentication].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebAuthentication extends _i1.Mock implements _i4.WebAuthentication {
  MockWebAuthentication() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i5.Credentials> login({
    String? audience,
    Set<String>? scopes = const {
      r'openid',
      r'profile',
      r'email',
      r'offline_access',
    },
    String? redirectUrl,
    String? organizationId,
    String? invitationUrl,
    bool? useEphemeralSession = false,
    Map<String, String>? parameters = const {},
    _i5.IdTokenValidationConfig? idTokenValidationConfig =
        const _i5.IdTokenValidationConfig(),
    _i5.SafariViewController? safariViewController,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #audience: audience,
            #scopes: scopes,
            #redirectUrl: redirectUrl,
            #organizationId: organizationId,
            #invitationUrl: invitationUrl,
            #useEphemeralSession: useEphemeralSession,
            #parameters: parameters,
            #idTokenValidationConfig: idTokenValidationConfig,
            #safariViewController: safariViewController,
          },
        ),
        returnValue: _i9.Future<_i5.Credentials>.value(_FakeCredentials_3(
          this,
          Invocation.method(
            #login,
            [],
            {
              #audience: audience,
              #scopes: scopes,
              #redirectUrl: redirectUrl,
              #organizationId: organizationId,
              #invitationUrl: invitationUrl,
              #useEphemeralSession: useEphemeralSession,
              #parameters: parameters,
              #idTokenValidationConfig: idTokenValidationConfig,
              #safariViewController: safariViewController,
            },
          ),
        )),
      ) as _i9.Future<_i5.Credentials>);

  @override
  _i9.Future<void> logout({String? returnTo}) => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
          {#returnTo: returnTo},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [UtilisateurControleur].
///
/// See the documentation for Mockito's code generation for more information.
class MockUtilisateurControleur extends _i1.Mock
    implements _i10.UtilisateurControleur {
  MockUtilisateurControleur() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i6.Utilisateur> getOrInsertUtilisateur(
    String? userId,
    String? userName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrInsertUtilisateur,
          [
            userId,
            userName,
          ],
        ),
        returnValue: _i9.Future<_i6.Utilisateur>.value(_FakeUtilisateur_4(
          this,
          Invocation.method(
            #getOrInsertUtilisateur,
            [
              userId,
              userName,
            ],
          ),
        )),
      ) as _i9.Future<_i6.Utilisateur>);
}
